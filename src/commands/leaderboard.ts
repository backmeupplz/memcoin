// Dependencies
import { Telegraf, ContextMessageUpdate } from 'telegraf'
import {
  getLeaderboard,
  UserInfo,
  getUserInfo,
  getCardinalLeaderboard,
} from '../models'
import { findIndex } from 'lodash'

// Leaderboard command
export function setupLeaderboard(bot: Telegraf<ContextMessageUpdate>) {
  bot.command('leaderboard', async ctx => {
    // Get users leaderboard
    const users = await getLeaderboard()
    // Get chat users
    const members: UserInfo[] = await Promise.all(
      users.map(user => getUserInfo(bot.telegram, user))
    )
    // Prepare leaderboard
    const list = members
      .map(
        member =>
          `${
            member.isUndefined
              ? `[${member.name}](tg://user?id=${member.chatId})`
              : `*${member.name}*`
          }: ${member.balance}`
      )
      .join('\n')
    // Get cardinals leaderboard
    const cardinals = await getCardinalLeaderboard()
    // Get cardinals
    const cardinalsMembers: UserInfo[] = await Promise.all(
      cardinals.map(user => getUserInfo(bot.telegram, user))
    )
    // Prepare cardinals leaderboard
    const cardinalsList = cardinalsMembers
      .map(
        member =>
          `${
            member.isUndefined
              ? `[${member.name}](tg://user?id=${member.chatId})`
              : `*${member.name}*`
          }: ${member.balance}`
      )
      .join('\n')
    // Check if there were any undefined
    const undefinedExist =
      findIndex(members, 'isUndefined') > -1 ||
      findIndex(cardinalsMembers, 'isUndefined') > -1
    // Prepare text
    let text = `üèÜ –¢–æ–ø –ú–µ–º–æ–ª–∏–≥–∞—Ä—Ö–æ–≤ üèÜ\n\n${list}\n\nüî• –¢–æ–ø –ú–µ–º–∫–∞—Ä–¥–∏–Ω–∞–ª–æ–≤ üî•\n\n${cardinalsList}`
    // Add undefined description
    if (undefinedExist) {
      text = `${text}\n\n"–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≥–∞—Ä–∞–∂–∞–Ω–∏–Ω" ‚Äî —ç—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¢–µ–ª–µ–≥—Ä–∞–º–∞, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–µ–π—á–∞—Å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ. –û–¥–Ω–∞–∫–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å!`
    }
    // Reply
    ctx.replyWithMarkdown(text)
  })
}
